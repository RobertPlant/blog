<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Robert Plant</title>
        <link>/posts/</link>
        <description>Recent content in Posts on Robert Plant</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 01 Sep 2020 17:24:00 +0100</lastBuildDate>
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Syncing EteSync CalDav calendars into Spacemacs and OrgMode</title>
            <link>/posts/caldav-emacs/</link>
            <pubDate>Tue, 01 Sep 2020 17:24:00 +0100</pubDate>
            
            <guid>/posts/caldav-emacs/</guid>
            <description>Add additional packages dotspacemacs-additional-packages &amp;#39;( org-caldav ) Configuring your Calendars (setq org-caldav-url &amp;#34;http://127.0.0.1:37358/rob@robertplant.io&amp;#34;) (setq org-caldav-calendar-id &amp;#34;calendarId&amp;#34;) (setq org-caldav-check-dav &amp;#34;http://127.0.0.1:37358/rob@robertplant.io&amp;#34;) (setq org-caldav-inbox &amp;#34;~/org/Calendar.org&amp;#34;) (setq org-icalendar-timezone &amp;#34;Europe/London&amp;#34;) (setq org-icalendar-date-time-format &amp;#34;;TZID=%Z:%Y%m%dT%H%M%S&amp;#34;) Setup EteSync DAV EteSyncDAV</description>
            <content type="html"><![CDATA[<h2 id="add-additional-packages">Add additional packages</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-elisp" data-lang="elisp">dotspacemacs-additional-packages <span style="color:#f92672">&#39;</span>(
                                   org-caldav
                                   )
</code></pre></div><h2 id="configuring-your-calendars">Configuring your Calendars</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-elisp" data-lang="elisp">(setq org-caldav-url <span style="color:#e6db74">&#34;http://127.0.0.1:37358/rob@robertplant.io&#34;</span>)
(setq org-caldav-calendar-id <span style="color:#e6db74">&#34;calendarId&#34;</span>)
(setq org-caldav-check-dav <span style="color:#e6db74">&#34;http://127.0.0.1:37358/rob@robertplant.io&#34;</span>)
(setq org-caldav-inbox <span style="color:#e6db74">&#34;~/org/Calendar.org&#34;</span>)
(setq org-icalendar-timezone <span style="color:#e6db74">&#34;Europe/London&#34;</span>)
(setq org-icalendar-date-time-format <span style="color:#e6db74">&#34;;TZID=%Z:%Y%m%dT%H%M%S&#34;</span>)
</code></pre></div><h2 id="setup-etesync-dav">Setup EteSync DAV</h2>
<p><a href="https://github.com/etesync/etesync-dav/blob/master/README.md#configuration-and-running">EteSyncDAV</a></p>
]]></content>
        </item>
        
        <item>
            <title>Emacs - Disable creation of lockfiles per project</title>
            <link>/posts/emacs-lockfiles/</link>
            <pubDate>Fri, 14 Aug 2020 14:21:00 +0100</pubDate>
            
            <guid>/posts/emacs-lockfiles/</guid>
            <description>To disable lockfiles on Emacs project add this into .dir-locals.el
((nil (create-lockfiles . nil) )) This can be very useful when working on CRA or Expo that watch for file changes and throw errors when the lock files are found and it attempts to read them, even though they are just symlinks.</description>
            <content type="html"><![CDATA[<p>To disable lockfiles on Emacs project add this into <code>.dir-locals.el</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-elisp" data-lang="elisp">((<span style="color:#66d9ef">nil</span>
  (create-lockfiles <span style="color:#f92672">.</span> <span style="color:#66d9ef">nil</span>)
  ))
</code></pre></div><p>This can be very useful when working on <a href="https://create-react-app.dev/">CRA</a> or <a href="https://expo.io/">Expo</a> that watch for file
changes and throw errors when the lock files are found and it attempts to read
them, even though they are just symlinks.</p>
]]></content>
        </item>
        
        <item>
            <title>paswitch-rs</title>
            <link>/posts/paswitch-rs/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            
            <guid>/posts/paswitch-rs/</guid>
            <description>I recently wrote a CLI tool (paswitch-rs) which combines the listing of pulse devices to the setting of a sink for all outputs. This is nothing new as you could manually change the devices via pavucontrol or using pactl list and finding your target sink and passing that id to paswitch. I have recently swapped over to using Pipewire and the number of pulse entities I now have has shot up from ~6 to over 40.</description>
            <content type="html"><![CDATA[<p>I recently wrote a CLI tool (<a href="https://github.com/RobertPlant/paswitch-rs">paswitch-rs</a>) which combines the listing of pulse
devices to the setting of a sink for all outputs. This is nothing new as you
could manually change the devices via <code>pavucontrol</code> or using <code>pactl list</code> and
finding your target sink and passing that id to <code>paswitch</code>. I have recently
swapped over to using <a href="https://pipewire.org/">Pipewire</a> and the number of pulse entities I now have has
shot up from ~6 to over 40. The tool simply searches the <code>pactl</code> output and sets
the source by its discovered id. This means that you can run a consistent
command and know that the result will be the same, no matter if the pulse sink
has changed id because you have added another audio interface.</p>
<p>This does raise some interesting issues with testing the code, to make the tests
run anywhere I could not list real pulse devices or change the default sink, as
this would differ for every user building the system. I have extracted the
<code>std::process::Command</code> logic into its own function and mocked the <code>pactl list</code>
by returning this in the tests. It then performs the regex as normal and the
test validates the correct ink by id.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-rust" data-lang="rust"><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">test</span>() {
    <span style="color:#66d9ef">let</span> contents <span style="color:#f92672">=</span> fs::read_to_string(<span style="color:#e6db74">&#34;src/test/data/pactl-fiio.txt&#34;</span>)
        .expect(<span style="color:#e6db74">&#34;Something went wrong reading the file&#34;</span>);

    assert_eq<span style="color:#f92672">!</span>(
        find(<span style="color:#f92672">&amp;</span>contents, <span style="color:#e6db74">&#34;Description&#34;</span>.to_string(), pattern).unwrap(),
        <span style="color:#e6db74">&#34;43&#34;</span>
    )
}
</code></pre></div><p>Ideally for future testing I would use a docker image that had pulse installed
to verify that the real commands run and correctly set the pulse sink.</p>
]]></content>
        </item>
        
        <item>
            <title>Rust Testing</title>
            <link>/posts/rust-testing/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            
            <guid>/posts/rust-testing/</guid>
            <description>TODOUnit Testing Test
TODODatabase Testing TODOE2E Testing </description>
            <content type="html"><![CDATA[<h2 id="unit-testing"><!-- raw HTML omitted -->TODO<!-- raw HTML omitted --> Unit Testing</h2>
<p>Test</p>
<h2 id="database-testing"><!-- raw HTML omitted -->TODO<!-- raw HTML omitted --> Database Testing</h2>
<h2 id="e2e-testing"><!-- raw HTML omitted -->TODO<!-- raw HTML omitted --> E2E Testing</h2>
]]></content>
        </item>
        
    </channel>
</rss>
